# =============================================================================
#
# - Copyright (C) 2017     George Li <yongxinl@outlook.com>
#
# - This is part of HomeVault imagebuilder project.
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# =============================================================================
#
# todo: verify VisualEditor / parsoid configuration

# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# ------------------------------------
#   Packages and installation
# ------------------------------------
install_role_name: 'mediawiki'

# .. envvar:: mediawiki_version
#
# specify the MediaWiki version clone from repository
mediawiki_version: 'REL1_29'

# .. envvar:: target_host_domain
#
# Specify hostname and domain that should be set in the target image.
target_host_domain: 'lifamilylife.com'

# .. envvar:: mediawiki_uniqueid
#
# Specify mediaiwki uniqueid
mediawiki_uniqueid: 'wiki'

# .. envvar:: mediawiki_server
#
# Specify server name to use for MediaWiki
mediawiki_server: '{{ mediawiki_uniqueid }}.{{ target_host_domain }}'

# .. envvar:: mediawiki_server
#
# Specify server name to use for MediaWiki
mediawiki_sitename: 'Family Library'

# .. envvar:: mediawiki_db_name
#
# specify the MediaWiki databaes name
mediawiki_db_name: 'wikidata_{{ mediawiki_uniqueid }}'

# .. envvar:: mediawiki_db_user
#
# specify the MediaWiki databaes user
mediawiki_db_user: '{{ install_role_name }}'

# .. envvar:: target_root_password
#
# Specify root password for both of os and database
target_root_password: 'secret'

# .. envvar:: mediawiki_admin_user
#
# Specify admin user for mediaWiki site
mediawiki_admin_user: 'wikiadmin'

# .. envvar:: mediawiki_admin_password
#
# Specify admin password for mediaWiki site
mediawiki_admin_password: '{{ target_root_password }}'

# .. envvar:: mediawiki_admin_email
#
# Specify admin email for mediaWiki site
mediawiki_admin_email: 'webmaster@{{ target_host_domain }}'

# .. envvar:: mediawiki_logo
#
# Specify log file for mediaWiki site, add $wgResourceBasePath in the front
mediawiki_logo: '$wgResourceBasePath/images/wikipedia_logo.png'

# .. envvar:: target_appdata_root
#
# Specify folder that will be use as new location of application data files
# in case if you want to collect all appdata files in one
target_appdata_root: '/var/lib'

# .. envvar:: target_appdata_root
#
# Specify folder that will be use as new location of application data files
# in case if you want to collect all appdata files in one
mediawiki_root: '{{ target_appdata_root }}/wiki'

# .. envvar:: mediawiki_base_packages
#
# List of required Linux packages for Mediawiki
mediawiki_base_packages:
  - 'git'
  - 'openssl'

# .. envvar:: mediawiki_core_skins
#
# List of skins will be download from MediaWiki repository
mediawiki_core_skins:
  - { name: 'Vector', type: 'wfload' }

# .. envvar:: mediawiki_3rdparty_skins
#
# List of skins will be download from 3rd-party repository
mediawiki_3rdparty_skins: []
  #- { name: 'foreground', repo: 'https://github.com/thingles/foreground.git', version: '6757cbb', type: 'wfload' }

# .. envvar:: mediawiki_core_extensions
#
# List of skins will be download from MediaWiki repository, load with $wfLoadExtension
mediawiki_core_extensions:
  - { name: 'CategoryTree', type: 'require' }             # provides a dynamic view of the wiki's catagory structure as a tree
  - { name: 'CirrusSearch', type: 'require' }             # implements searching for MediaWiki using ElasticSearch
  - { name: 'Cite', type: 'wfload' }                      # allows footnotes for citing sources and helps for correctly citing content in offline media
  - { name: 'CiteThisPage', type: 'wfload' }              # adds a special page that provides different citation format
  - { name: 'CodeEditor', type: 'wfload' }                # provides a syntax-highlighting code editor for site
  - { name: 'ConfirmEdit', type: 'wfload' }               # adds CAPTCHAs for page savers and other user actions
  - { name: 'Echo', type: 'require' }                     # provides an in-wiki notification system that can be used by other extensions
  - { name: 'Elastica', type: 'wfload' }                  # provides base ElasticSearch functionality
  - { name: 'Flow', type: 'require' }                     # provides a discussion and collaboration system for talk pages
  - { name: 'ImageMap', type: 'wfload' }                  # allows clickable image maps
  - { name: 'InputBox', type: 'wfload' }                  # allows users to add predefined HTML forms
  - { name: 'Interwiki', type: 'wfload' }                 # adds the "Special:Interwiki" page to MediaWiki, to view and edit the interwiki table
  - { name: 'LocalisationUpdate', type: 'wfload' }        # allows to update the locations for MediaWiki message without upgrade the MediaWiki
  - { name: 'Math', type: 'wfload' }                      # allows to render mathematical formulas
  - { name: 'MobileFrontend', type: 'wfload' }            # provides a mobile-friendly view
  - { name: 'MultimediaViewer', type: 'wfload' }          # provides a better experience to users when they click on thumbnails in a page
  - { name: 'ParserFunctions', type: 'wfload' }           # enhances parser with logical and string functions
  - { name: 'PdfHandler', type: 'wfload' }                # allows to handle PDF files
  - { name: 'PageImages', type: 'wfload' }                # collect information about images used on a page. required by PopUp extension, require beofre 1.28
  - { name: 'ParsoidBatchAPI', type: 'wfload' }           # provides an API module which Parsoid uses to more effeciently
  - { name: 'Popups', type: 'wfload' }                    # displays "hovercards" popups with summaries of article contents
  - { name: 'Quiz', type: 'wfload' }                      # quiz building tool for mediaWiki
  - { name: 'Scribunto', type: 'require' }                # allws for embedding scripting language in MediaWiki.
  - { name: 'SyntaxHighlight_GeSHi', type: 'wfload' }     # provides rich formating of source code using the <syntaxhighlight> tag
  - { name: 'TemplateData', type: 'wfload' }              # allows to store, retrieve and visualise information about template
  - { name: 'TextExtracts', type: 'wfload' }              # provides an API with allows to retrieve plain-text. required by PopUp extension
  - { name: 'VisualEditor', type: 'wfload' }              # provides a reliable rich-text editor for Mediawiki, Parsoid service is required.
  - { name: 'WikiEditor', type: 'wfload' }                # provides an improved interface for editing wikitext

# .. envvar:: mediawiki_3rdparty_extensions
#
# List of skins will be download from 3rd-party repository
mediawiki_3rdparty_extensions:
  - { name: 'DynamicPageList', repo: 'https://github.com/Alexia/DynamicPageList.git', version: '559e5ce', type: 'wfload' }      # Create lists of other articles based on their category etc.
  - { name: 'EmbedVideo', repo: 'https://github.com/HydraWiki/mediawiki-embedvideo.git', version: '150d248', type: 'wfload' }   # embedding video clips from over 24 popular video sharing services
  - { name: 'PDFEmbed', repo: 'https://github.com/HydraWiki/PDFEmbed.git', version: '5a58679', type: 'wfload' }                 # allows Adobe Acrobat PDF files to be embedded into a wiki article using tags
  - { name: 'WYSIWYG', repo: 'https://github.com/Mediawiki-wysiwyg/WYSIWYG-CKeditor.git', version: 'wysiwyg_mw128_462', type: 'wfload' }   # another WYSIWYG editor based on CKEditor

# .. envvar:: mediawiki_extension_dependency
#
# List of extensions need to be initialize by composer
mediawiki_extension_dependency:
  - { name: 'Flow' }
  - { name: 'Elastica' }
  - { name: 'SyntaxHighlight_GeSHi' }

# .. envvar:: mediawiki_core_services
#
# List of core services need for MediaWiki
mediawiki_core_services:
  - { name: 'parsoid', version: 'master' }                # reliable rich-text editor for the Web and wiki

# .. envvar:: mediawiki_extensions_3rdparty
#
# List of extensions will be install/update by php composer
mediawiki_extension_bycomposer: []

# .. envvar:: mediawiki_customization
#
# List of configuration file will be copy to Linux base filesystems
mediawiki_customization:
  - { name: 'images/', dest: '{{ mediawiki_root }}/images/' }
  - { name: 'skins/vector/assets', dest: '{{ mediawiki_root }}/skins/Vector' }
  - { name: 'skins/vector/skin.json', dest: '{{ mediawiki_root }}/skins/Vector/skin.json' }
  - { name: 'wikieditor/modules/ext.wikiEditor.toolbar.js', dest: '{{ mediawiki_root }}/extensions/WikiEditor/modules/ext.wikiEditor.toolbar.js' }
  - { name: 'mediawiki-searchEngine.sh', dest: '{{ mediawiki_root }}/searchEngine.sh', mode: '0755' }
  - { name: 'mediawiki-wikiUploader.sh', dest: '{{ mediawiki_root }}/wikiUploader.sh', mode: '0755' }
  - { name: 'mediawiki-prepareMySQL.sh', dest: '{{ mediawiki_root }}/prepareMySQL.sh', mode: '0755' }
  - { name: 'mediawiki-functions.bash', dest: '{{ mediawiki_root }}/functions.bash', mode: '0644' }

# .. envvar:: mediawiki_configuration
#
# List of configuration file will be copy to Linux base filesystems
mediawiki_configuration:
  - { name: 'etc-nginx-confd-wiki-httpd.conf.j2', dest: '{{ mediawiki_root }}/conf.d/wiki-httpd.conf' }
  - { name: 'etc-nginx-confd-wiki-https.conf.j2', dest: '{{ mediawiki_root }}/conf.d/wiki-https.conf' }
  - { name: 'etc-nginx-confd-wiki.ini.j2', dest: '{{ mediawiki_root }}/conf.d/wiki.ini' }
  - { name: 'mediawiki-LocalSettings.php.j2', dest: '{{ mediawiki_root }}/LocalSettings.php' }
  - { name: 'mediawiki-docker-compose.yml.j2', dest: '{{ mediawiki_root }}/docker-compose.yml', mode: '0755' }
  - { name: 'services-parsoid-config.yaml.j2', dest: '{{ mediawiki_root }}/services/parsoid/config.yaml' }
  - { name: 'etc-systemd-system-parsoid.service.j2', dest: '/etc/systemd/system/parsoid.service', mode: '0755' }
