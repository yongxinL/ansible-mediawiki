<?php
# This file was automatically generated by the MediaWiki 1.25.5
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings
#

## Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

## Uncomment this to disable output compression
#$wgDisableOutputCompression = true;

$wgSitename = "{{ mediawiki_sitename }}";
$wgMetaNamespace = "{{ mediawiki_sitename | replace(" ","_") }}";

## The URL base path to the directory containing the wiki;
#  defaults for all runtime URL paths are based off of this.
#  For more information on customizing the URLs
#  (like /w/index.php/Page_title to /wiki/Page_title) please see:
#  https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/w";
$wgArticlePath = "/wiki/$1";
$wgUsePathInfo = true;

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://{{ mediawiki_server }}";

## The relative URL path to the skins directory
$wgStylePath = "$wgScriptPath/skins";
$wgResourceBasePath = $wgScriptPath;

## The relative URL path to the logo.  Make sure you change this from the default,
# or else you'll overwrite your logo when you upgrade!
$wgLogo = "{{ mediawiki_logo }}";

## UPO means: this is also a user preference option
$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "webmaster@{{ target_host_domain }}";
$wgPasswordSender = "webmaster@{{ target_host_domain }}";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = false;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "{{ mediawiki_db_name }}";
$wgDBuser = "{{ mediawiki_db_user }}";
$wgDBpassword = "{{ wiki_db_passwd.stdout }}";

## MySQL specific settings
$wgDBprefix = "wiki_";

## MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Performance tunning
# Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgSessionCacheType  = CACHE_DB;  // Bug #T147161
$wgMessageCacheType = CACHE_ACCEL;
$wgMemCachedServers = array();
$wgUseLocalMessageCache = true;
$wgParserCacheType = CACHE_ACCEL;
$wgUseGzip = true;
$wgEnableSidebarCache = true;

## Set $wgCacheDirectory to a writable directory on the web server
#  to make your wiki go slightly faster. The directory should not
#  be publically accessible from the web.
$wgCacheDirectory = "{$IP}/cache";

# NO DB HITS!
$wgDisableCounters = true;
$wgMiserMode = true;

# Text cache
$wgCompressRevisions = true; // use with care (see talk page)
$wgRevisionCacheExpiry = 3*24*3600;
$wgParserCacheExpireTime = 14*24*3600;

## File cache
$wgUseFileCache = true;
$wgFileCacheDirectory = "{$IP}/cache";

## To enable image uploads, make sure the 'images' directory
#  is writable, then set this to true:
$wgEnableWriteAPI = true;       // Enable the API
$wgEnableUploads = true;        // Enable uploads
$wgAllowJavaUploads = true;     // Solves problem with Office 2007 and newer files (docx, xlsx, etc.)
$wgUseImageResize = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## Increase the limit to 36m pixels or 6000x6000
$wgMaxImageArea = 3.6e7;
$wgMemoryLimit = 307200;
$wgMaxShellMemory = 307200;

// Don't allow more than three thumb sizes to reduce disk usage
$wgThumbLimits  = array(
   120, // thumb size 0
   250, // thumb size 1
   300  // thumb size 2
  );

// By default display the midsize option
$wgDefaultUserOptions['thumbsize'] = 1; // thumb size 250

## Paging limit for categories, default is 200
$wgCategoryPagingLimit = 30;

## Subpage in namespace
# Enable subpages in the main namespace
$wgNamespacesWithSubpages = array(
    NS_MAIN => true,
    NS_PROJECT => true,
    NS_TEMPLATE => true,
    NS_CATEGORY => true,
    NS_MEDIAWIKI => true
);

## This is the list of preferred extensions for uploading files
## Uploading files with extensions not in this list will trigger a warning.
#  Add several file types to the default array
$wgFileExtensions = array_merge(
    $wgFileExtensions, array(
        'ppt', 'psd','mp3', 'xls', 'xlsx', 'swf', 'doc','docx',
        'odt', 'odc', 'odp', 'odg', 'mpp', 'mp4', 'mov', 'pdf', 'svg'
        )
    );

## for PDF support
$wgPdfProcessor = 'gs';
$wgPdfPostProcessor = $wgImageMagickConvertCommand;
$wgPdfInfo = 'pdfinfo';
$wgPdftoText = 'pdftotext';
$wgPdfOutputExtension = 'jpg';
$wgPdfHandlerDpi = '150';
$wgPdfHandlerJpegQuality = '80';

## For SVG image support
$wgAllowTitlesInSVG = true;
$wgSVGConverter = 'ImageMagick';
$wgSVGConverters = array(
    'ImageMagick' => '"' . $wgImageMagickConvertCommand . '" -background transparent -thumbnail $widthx$height^! $input PNG:$output',
);

## InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons = false;

## If you use ImageMagick (or any other shell command) on a
#  Linux server, this will need to be set to the name of an
#  available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
#  create the directories images/archive, images/thumb and
#  images/temp, and make them all writable. Then uncomment
#  this, if it's not already uncommented:
$wgHashedUploadDirectory = true;

## Set $wgAllowExternalImages to allow external images to be rendered
#  inline with text.
#  Default value: false
$wgAllowExternalImages = true;

## Set $wgAllowImageTag to allow <img> tag to be used in wikitext
#  Default value: false
$wgAllowImageTag = true;

## Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "c130a01363104bbedff4122a21e1ef0fe1889ba72f40c31521e174d1155616f7";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

## Site upgrade key. Must be set to a string (default provided) to turn on the
#  web installer while LocalSettings.php is in place
$wgUpgradeKey = "626ff68b75ed37e9";

## For attaching licensing metadata to pages, and displaying an
#  appropriate copyright notice / icon. GNU Free Documentation
#  License and Creative Commons licenses are supported so far.
$wgRightsPage = "{{ mediawiki_sitename }}"; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "www.{{ target_host_domain }}";
$wgRightsText = "{{ mediawiki_sitename }}";
$wgRightsIcon = "$wgScriptPath/resources/assets/licenses/cc-by-nc-sa.png";

## Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

## This location where uploaded files will be stored.
$wgUploadDirectory = "{$IP}/images";

## Default skin: you can change the default skin. Use the internal symbolic
#  names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

## Enabled skins.
#  The following skins were automatically enabled:
{% if mediawiki_core_skins %}
{% for item in mediawiki_core_skins %}
{% if item.type == "wfload" %}
wfLoadSkin( '{{ item.name }}' );
{% else %}
require_once "$IP/skins/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endfor %}
{% endif %}

## Skin: Vector
#  Experimental setting to make Vector slightly more responsive.
$wgVectorResponsive = true;

# additional Skins
{% if mediawiki_3rdparty_skins %}
{% for item in mediawiki_3rdparty_skins %}
{% if item.type == "wfload" %}
wfLoadSkin( '{{ item.name }}' );
{% else %}
require_once "$IP/skins/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endfor %}
{% endif %}

## Enabled Extensions. Most extensions are enabled by including the base extension file here
#  but check specific extension documentation for more details
#  The following extensions were automatically enabled:
{% if mediawiki_core_extensions %}
{% for item in mediawiki_core_extensions %}
{% if item.type == "wfload" %}
wfLoadExtension( '{{ item.name }}' );
{% else %}
{% if item.name == "CirrusSearch" %}
#require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% else %}
require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

## Extension: 3rd-party
{% if mediawiki_3rdparty_extensions %}
{% for item in mediawiki_3rdparty_extensions %}
{% if item.type == "wfload" %}
wfLoadExtension( '{{ item.name }}' );
{% else %}
require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endfor %}
{% endif %}

# Extra configuration for core extensions
{% if mediawiki_core_extensions %}
{% for item in mediawiki_core_extensions %}
{% if item.name == "Flow" %}
## Extension: Flow
#  please run maintenance/update.php after enable Flow extension above
#  and then run below command to enable or disable Flow for a namespace.
#  all the NS_* constants here: https://www.mediawiki.org/wiki/Manual:Namespace_constants
/*
    php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=revision
    php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=archive
    php maintenance/populateContentModel.php --wiki={{ mediawiki_sitename | replace(" ","_") }} --ns=all --table=page
*/
#  these lines enable Flow on the "Talks"  namespaces, uncommit the line as need
$wgNamespaceContentModels[NS_TALK] = 'flow-board';
$wgNamespaceContentModels[NS_TEMPLATE_TALK] = 'flow-board';
$wgNamespaceContentModels[NS_CATEGORY_TALK] = 'flow-board';
{% endif %}
{% endfor %}
{% endif %}

# Enable by default for everybody
$wgDefaultUserOptions['visualeditor-enable'] = 1;

// Don't allow users to disable it
$wgHiddenPrefs[] = 'visualeditor-enable';

# OPTIONAL: Enable VisualEditor's experimental code features
$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;

# Enabling other Namespaces
$wgVisualEditorAvailableNamespaces = [
    NS_MAIN => true,
    NS_TALK => true,
    2 => true,    // NS_USER
    4 => true,    // NS_{{ mediawiki_sitename | replace(" ","_") }}
    10 => true,   // NS_TEMPLATE
    12 => true,   // NS_HELP
    14 => true,   // NS_CATEGORY
    "_merge_strategy" => "array_plus"
];

# List skins that supported VE
$wgVisualEditorSupportedSkins = [
  'vector'
];

# Linking with Parsoid
$wgVirtualRestConfig['modules']['parsoid'] = array(
  # URL to the Parsoid instance
  'url' => 'http://127.0.0.1:8142',
  # Parsoid "domain", see below (optional)
  'domain' => '{{ mediawiki_sitename | replace(" ","_") }}',
  # Forward users' cookie: headers to Parsoid.
  'forwardCookies' => 'true'
);

// This feature requires a non-locking session store. The default session store will not work and
// will cause deadlocks (connection timeouts from Parsoid) when trying to use this feature.
$wgSessionsInObjectCache = true;

## Extension: WikiEditor
# Enables use of WikiEditor by default but still allows users to disable it in preferences
$wgDefaultUserOptions['usebetatoolbar'] = 1;
# Enables link and table wizards by default but still allows users to disable them in preferences
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
# Displays the Preview and Changes tabs
$wgDefaultUserOptions['wikieditor-preview'] = 0;
# Displays the Publish and Cancel buttons on the top right side
$wgDefaultUserOptions['wikieditor-publish'] = 0;

## Extension: CodeEditor
#  Enable the CodeEditor on JavaScript and CSS pages
$wgCodeEditorEnableCore = true;
#  Enable the CodeEditor on Scribunto
$wgScribuntoUseCodeEditor = true;
#  Enable the SyntaxHighlight_GeSHi on for Scribunto
$wgScribuntoUseGeSHi = true;

## Extension: ConfirmEdit
#wfLoadExtensions( array( 'ConfirmEdit', 'ConfirmEdit/ReCaptchaNoCaptcha' ) );
#$wgCaptchaClass = 'ReCaptchaNoCaptcha';
#$wgReCaptchaSiteKey = '6LcQI0cUAAAAAP8DPAoBrVwuBYRGidcLimbzGGFT';
#$wgReCaptchaSecretKey = '6LcQI0cUAAAAAGjDO-dfW61-tSqEa04uY7hikwFK';
$wgCaptchaTriggers['edit']          = false;
$wgCaptchaTriggers['create']        = false;
$wgCaptchaTriggers['addurl']        = false;
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin']      = true;

## Extension: Math
#  Set MathML as default rendering option
$wgDefaultUserOptions['math'] = 'mathml';
$wgMathFullRestbaseURL= 'https://en.wikipedia.org/api/rest_';

## Extension: MobileFrontend
#  Enable MobileFrontend
$wgMFAutodetectMobileView = true;

## Extension: Scribunto
#  Enable Scribunto extension and set to use lua standalone engine
$wgScribuntoDefaultEngine = 'luastandalone';

## Extension: TextExtracts
#  <tag> will be excluded from extraction
$wgExtractsRemoveClasses = array(
  'dl', 'div'
);

## Configure Wiki Group permission
#$wgGroupPermissions['*']['read'] = false;                // disable reading for anonymous users
#$wgGroupPermissions['*']['createaccount'] = false;       // prevent new user registration
# But allow them to access the login page or else there will be no way to log in!
#$wgWhitelistRead = array ("Main Page", "Special:Userlogin", "Special:Recentchanges", "MediaWiki:Common.css", "-");
#$wgWhitelistReadRegexp = array( "/File:.*icon.*/" );
$wgGroupPermissions['*']['edit'] = false;                 // disable editing for anonymous users
$wgGroupPermissions['user']['edit'] = true;               // disable editing for anonymous users
$wgGroupPermissions['sysop']['edit'] = true;              // disable editing for anonymous users
$wgGroupPermissions['user']['upload'] = true;             // allow register users to upload files
$wgGroupPermissions['registered_users']['wysiwyg']=true;  // allow register users for richeditor
$wgGroupPermissions['sysop']['createaccount'] = true;     //Prevent new user registrations except by sysops
$wgGroupPermissions['sysop']['deletelogentry'] = true;    // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['deleterevision'] = true;    // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['hideuser'] = true;          // allow Sysop to hide usernames from users
$wgGroupPermissions['sysop']['suppressrevision'] = true;  // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['suppressionlog'] = true;    // allow Sysop to hide revisions and log items from users

## Debugging options in mediaWiki
#$wgShowExceptionDetails = true;
#$wgDebugToolbar = true;
#$wgShowDebug = true;
#$wgDebugLogFile  = "/var/log/mediawiki.log";

## Enables CirrusSearch and ElasticSearch in Wiki
## Installation:
## 1. pull ElasticSearch 1.7/2.x/5.x image
##    docker pull elasticsearch:2-alpine
#
## 2. run ElasticSearch with default
##    docker run -d --name searchEngine --restart always -p 9200:9200 -p 9300:9300 elasticsearch:2-alpine
#
## 3. check below option and make sure its uncommit
#$wgDisableSearchUpdate = true;

## 4. configure search servers if you aren't running ElasticSearch on localhost
## should be configured with the servers (names or IP without port).
#$wgCirrusSearchServers = array( 'localhost' );

## 5. Now run this script to generate your elasticsearch index:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/updateSearchIndexConfig.php
#
## 6. Now commit $wgDisableSearchUpdate = true above. Updates should start heading to Elasticsearch.
#
## 7. Next bootstrap the search index by running:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/forceSearchIndex.php --skipLinks --indexOnSkip
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/forceSearchIndex.php --skipParse
#
## 8. Once that is complete uncommit this to funnel queries to ElasticSearch:
#$wgSearchType = 'CirrusSearch';
#$wgRelatedArticlesUseCirrusSearch = true;

# End of automatically generated settings.
# Add more configuration options below.
