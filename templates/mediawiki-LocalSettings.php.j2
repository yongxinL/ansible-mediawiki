<?php
# =============================================================================
#
# - This is part of Lifamily Library (Wiki) project
#
# - Copyright (C) 2010-2021     George Li <yongxinl@outlook.com>
#
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings
#

## Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

## Uncomment this to disable output compression
#$wgDisableOutputCompression = true;

$wgSitename = "{{ mediawiki_sitename }}";
$wgMetaNamespace = "{{ mediawiki_sitename | replace(" ","") }}";

## The URL base path to the directory containing the wiki;
#  defaults for all runtime URL paths are based off of this.
#  For more information on customizing the URLs
#  (like /w/index.php/Page_title to /wiki/Page_title) please see:
#  https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/{{ mediawiki_ScriptPath }}";
$wgArticlePath = "/{{ mediaiwki_ArticlePath }}/$1";
$wgUsePathInfo = true;

## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://{{ mediawiki_server }}";

## The relative URL path to the skins directory
$wgStylePath = "$wgScriptPath/skins";
$wgResourceBasePath = $wgScriptPath;

## The relative URL path to the upload directory
$wgUploadPath = "$wgScriptPath/{{ mediawiki_upload }}";

## The relative URL path to the logo.  Make sure you change this from the default,
# or else you'll overwrite your logo when you upgrade!
$wgLogo = "{{ mediawiki_logo }}";

## UPO means: this is also a user preference option
$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "thelifamy@gmail.com";
$wgPasswordSender = "thelifamy@gmail.com";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = false;

## SMTP server configuration
$wgSMTP = [
    'host' => 'ssl://smtp.gmail.com',
    'IDHost' => '{{ target_host_domain }}',
    'localhost' => '{{ target_host_domain }}',
    'port' => 465,
    'username' => '',
    'password' => '',
    'auth' => true
];

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "{{ mediawiki_db_name }}";
$wgDBuser = "{{ mediawiki_db_user }}";
$wgDBpassword = "{{ wiki_db_passwd.stdout }}";

## MySQL specific settings
$wgDBprefix = "ljmw_";

## MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Performance tunning
# Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgSessionCacheType  = CACHE_DB;  // Bug #T147161
$wgMessageCacheType = CACHE_ACCEL;
$wgMemCachedServers = array();
$wgUseLocalMessageCache = true;
$wgParserCacheType = CACHE_ACCEL;
$wgUseGzip = true;
$wgEnableSidebarCache = true;

## Set $wgCacheDirectory to a writable directory on the web server
#  to make your wiki go slightly faster. The directory should not
#  be publically accessible from the web.
$wgCacheDirectory = "{$IP}/cache";

# NO DB HITS!
$wgDisableCounters = true;
$wgMiserMode = true;

# Text cache
$wgCompressRevisions = true; // use with care (see talk page)
$wgRevisionCacheExpiry = 3*24*3600;
$wgParserCacheExpireTime = 14*24*3600;

## File cache
$wgUseFileCache = true;
$wgFileCacheDirectory = "{$IP}/cache";

## To enable image uploads, make sure the 'images' directory
#  is writable, then set this to true:
$wgEnableWriteAPI = true;       // Enable the API
$wgEnableUploads = true;        // Enable uploads
$wgAllowJavaUploads = true;     // Solves problem with Office 2007 and newer files (docx, xlsx, etc.)
$wgUseImageResize = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## Increase the limit to 36m pixels or 6000x6000
$wgMaxImageArea = 3.6e7;
$wgMemoryLimit = 307200;
$wgMaxShellMemory = 307200;

## allow raw, unchecked HTML in <html> ... </html> sections
$wgRawHtml = true;

## Don't allow more than three thumb sizes to reduce disk usage
$wgThumbLimits  = array(
   120, // thumb size 0
   250, // thumb size 1
   300  // thumb size 2
  );

# By default display the midsize option
$wgDefaultUserOptions['thumbsize'] = 1; // thumb size 250

## Paging limit for categories, default is 200
$wgCategoryPagingLimit = 30;

## Subpage in namespace
# Enable subpages in the main namespace
$wgNamespacesWithSubpages = array(
    NS_MAIN => true,
    NS_PROJECT => true,
    NS_TEMPLATE => true,
    NS_CATEGORY => true,
    NS_MEDIAWIKI => true
);

## This is the list of preferred extensions for uploading files
## Uploading files with extensions not in this list will trigger a warning.
#  Add several file types to the default array
$wgFileExtensions = array_merge(
    $wgFileExtensions, array(
        'ppt', 'psd','mp3', 'xls', 'xlsx', 'swf', 'doc','docx',
        'odt', 'odc', 'odp', 'odg', 'mpp', 'mp4', 'mov', 'pdf', 'svg'
        )
    );

## for PDF support
$wgPdfProcessor = 'gs';
$wgPdfPostProcessor = $wgImageMagickConvertCommand;
$wgPdfInfo = 'pdfinfo';
$wgPdftoText = 'pdftotext';
$wgPdfOutputExtension = 'jpg';
$wgPdfHandlerDpi = '150';
$wgPdfHandlerJpegQuality = '80';

## For SVG image support
$wgAllowTitlesInSVG = true;
$wgSVGConverter = 'ImageMagick';
$wgSVGConverters = array(
    'ImageMagick' => '"' . $wgImageMagickConvertCommand . '" -background transparent -thumbnail $widthx$height^! $input PNG:$output',
);

## InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons = false;

## If you use ImageMagick (or any other shell command) on a
#  Linux server, this will need to be set to the name of an
#  available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
#  create the directories images/archive, images/thumb and
#  images/temp, and make them all writable. Then uncomment
#  this, if it's not already uncommented:
$wgHashedUploadDirectory = true;

## Set $wgAllowExternalImages to allow external images to be rendered
#  inline with text.
#  Default value: false
$wgAllowExternalImages = true;

## Set $wgAllowImageTag to allow <img> tag to be used in wikitext
#  Default value: false
#$wgAllowImageTag = true;

## Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "c130a01363104bbedff4122a21e1ef0fe1889ba72f40c31521e174d1155616f7";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

## Site upgrade key. Must be set to a string (default provided) to turn on the
#  web installer while LocalSettings.php is in place
$wgUpgradeKey = "626ff68b75ed37e9";

## For attaching licensing metadata to pages, and displaying an
#  appropriate copyright notice / icon. GNU Free Documentation
#  License and Creative Commons licenses are supported so far.
$wgRightsPage = "{{ mediawiki_sitename }}"; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "{{ target_host_domain }}";
$wgRightsText = "{{ mediawiki_sitename }}";
$wgRightsIcon = "$wgScriptPath/resources/assets/licenses/cc-by-nc-sa.png";

## Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

## This location where uploaded files will be stored.
$wgUploadDirectory = "{$IP}/{{ mediawiki_upload }}";

## Determines how section IDs should be encoded
#  html5 - modern HTML5 style encoding with minimal escaping. Allow to display Unicode characters
#  legacy - old MediaWiki-style encoding, e.g. () turns into .28 & .29
#  this need to be set for ScrollSpy function on TOC (table of content)
$wgFragmentMode = [ 'html5' ];

##  The following skins were automatically enabled:
{% if mediawiki_core_skins %}
{% for item in mediawiki_core_skins %}
# Load skin: {{ item.name }}
{% if item.type == "wfload" %}
wfLoadSkin( '{{ item.name }}' );
{% else %}
require_once "$IP/skins/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% if item.name == "Vector" %}
# Experimental setting to make Vector slightly more responsive.
$wgVectorResponsive = true;
{% endif %}
{% endfor %}
{% endif %}

## Default skin: you can change the default skin. Use the internal symbolic
#  names, ie 'vector', 'monobook':
$wgDefaultSkin = "Vector";

{% if mediawiki_3rdparty_skins %}
{% for item in mediawiki_3rdparty_skins %}
# Load 3rdparty skins: {{ item.name }}
{% if item.type == "wfload" %}
wfLoadSkin( '{{ item.name }}' );
{% else %}
require_once "$IP/skins/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endfor %}
{% endif %}

## Enabled Extensions. Most extensions are enabled by including the base extension file here
#  but check specific extension documentation for more details
#  The following extensions were automatically enabled:
{% if mediawiki_core_extensions %}
{% for item in mediawiki_core_extensions %}
{% if item.enabled == "no" %}
#  Load Extension (disabled): {{ item.name }}
{% if item.type == "wfload" %}
#wfLoadExtension( '{{ item.name }}' );
{% else %}
#require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% else %}
# Load Extension: {{ item.name }}
{% if item.type == "wfload" %}
wfLoadExtension( '{{ item.name }}' );
{% else %}
require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% endif %}
{% endif %}
## Extension configuration: {{ item.name }}
{% if item.name == "CategoryTree" %}
$wgCategoryTreeMaxChildren = 200;               // maximum number of children shown in a tree node.
{% endif %}
{% if item.name == "CodeEditor" %}
$wgDefaultUserOptions['usebetatoolbar'] = 1;    // user option provided by WikiEditor extension
$wgCodeEditorEnableCore = true;                 // enable the CodeEditor on JavaScript and CSS pages
$wgScribuntoUseCodeEditor = true;               // enable the CodeEditor on Scribunto
$wgScribuntoUseGeSHi = true;                    // enable the SyntaxHighlight_GeSHi on for Scribunto
{% endif %}
{% if item.name == "CommentStreams" %}
$wgAllowDisplayTitle = true;                    // CommentStreams uses DisplayTitle Magic words
$wgRestrictDisplayTitle = false;                // CommentStreams uses DisplayTitle Magic words
$wgCommentStreamsEnableVoting = true;           // allows logged in users to vote thumbs up, down.
$wgCommentStreamsEnableTalk = false;            // disable comments on all talk namespaces
$wgGroupPermissions['comment']['cs-comment'] = true;            // assign cs-comment right to the group comment
$wgGroupPermissions['moderator']['cs-moderator-edit'] = true;   // assign cs-moderator-edit right to the group moderator
$wgCommentStreamsModeratorFastDelete = true;                    // allow users with csdelete right to delete a comment
{% endif %}
{% if item.name == "ConfirmEdit" %}
#wfLoadExtensions( array( 'ConfirmEdit', 'ConfirmEdit/ReCaptchaNoCaptcha' ) );
#$wgCaptchaClass = 'ReCaptchaNoCaptcha';
#$wgReCaptchaSiteKey = '';
#$wgReCaptchaSecretKey = '';
$wgCaptchaTriggers['edit']          = false;
$wgCaptchaTriggers['create']        = false;
$wgCaptchaTriggers['addurl']        = false;
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin']      = true;
{% endif %}
{% if item.name == "Echo" %}
$wgDefaultUserOptions['echo-email-frequency'] = -1;
$wgEchoUseJobQueue = false;                                 // Defer notificate via job or immediately
$wgDefaultUserOptions["echo-subscriptions-email-commentstreams-notification-category"] = true; // enable email notifications for CommentStreams
$wgDefaultUserOptions["echo-subscriptions-web-commentstreams-notification-category"] = true; // enable web notifications for CommentStreams
{% endif %}
{% if item.name == "Flow" %}
$wgNamespaceContentModels[NS_TALK] = 'flow-board';
$wgNamespaceContentModels[NS_TEMPLATE_TALK] = 'flow-board';
$wgNamespaceContentModels[NS_CATEGORY_TALK] = 'flow-board';
{% endif %}
{% if item.name == "Interwiki" %}
$wgGroupPermissions['sysop']['interwiki'] = true;           // grant sysops permissions to edit interwiki data
{% endif %}
{% if item.name == "LocalisationUpdate" %}
$wgLocalisationUpdateDirectory = "$IP/cache";               // directory to store cache files in, or uses default $wgCacheDirectory
{% endif %}
{% if item.name == "Math" %}
$wgDefaultUserOptions['math'] = 'mathml';                       // Set MathML as default rendering option
$wgMathFullRestbaseURL= 'https://en.wikipedia.org/api/rest_';   // use Mathoid as a service
{% endif %}
{% if item.name == "OpenIDConnect" %}
#$wgOpenIDConnect_Config['https://{{mediawiki_server}}'] = [
#    'clientID' => '...',
#    'clientsecret' => '...',
#    'name' => "theLiJIA",
#    'icon' => '$wgLogo',
#    'scope' => [ 'openid', 'profile', 'email' ]
#];
{% endif %}
{% if item.name == "ParserFunctions" %}
$wgPFEnableStringFunctions = true;              // activate the integrated string functionality
$wgPFStringLengthLimit = 1000;                  // defines the maximum length of a string that string functions are allowed
{% endif %}
{% if item.name == "PluggableAuth" %}
#$wgPluggableAuth_EnableAutoLogin = true;                 // should login occur automatically when a user visit the wiki
#$wgPluggableAuth_EnableLocalLogin = true;                // should user also be presented with user/pwd fields on the login page to allow local password-based login to the wiki
#$wgPluggableAuth_EnableLocalProperties = false;          // users can edit their email address and real name on the wiki if set to true
#$wgPluggableAuth_ButtonLabelMessage = 'theLiJIA';        // custome the button label with a localizable message in the login page
{% endif %}
{% if item.name == "Popups" %}
$wgPopupsHideOptInOnPreferencesPage = true;        // option to hidden on Preferences page
$wgPopupsOptInDefaultState = '1';                   // page previews visibility
$wgPopupsReferencePreviewsBetaFeature = false;      // enabled for all users by default
{% endif %}
{% if item.name == "ReplaceText" %}
$wgGroupPermissions['bureaucrat']['replacetext'] = true;    // add the permission for bureaucrat or bot users.
{% endif %}
{% if item.name == "Scribunto" %}
$wgScribuntoDefaultEngine = 'luastandalone';        // set to use lua standalone engine
{% endif %}
{% if item.name == "SpamBlacklist" %}
$wgBlacklistSettings = [
    'spam' => [
        'files' => [
            "https://meta.wikimedia.org/w/index.php?title=Spam_blacklist&action=raw&sb_ver=1",
            "https://en.wikipedia.org/w/index.php?title=MediaWiki:Spam-blacklist&action=raw&sb_ver=1"
        ],
    ],
];
{% endif %}
{% if item.name == "TemplateData" %}
$wgTemplateDataUseGUI = true;                       // experimental dialog interface to edit template JSON
{% endif %}
{% if item.name == "TextExtracts" %}
$wgExtractsRemoveClasses = array(
  'dl', 'div'                                       // tags will be excluded from extraction
);
{% endif %}
{% if item.name == "TitleBlacklist" %}
$wgTitleBlacklistSources = [
    [
         'type' => 'localpage',
         'src'  => 'MediaWiki:Titleblacklist'
    ],
    [
         'type' => 'url',
         'src'  => 'https://meta.wikimedia.org/w/index.php?title=Title_blacklist&action=raw'
    ]
];
{% endif %}
{% if item.name == "VisualEditor" %}
# Load Extension : RestAPI, available after REL1_35
$wgEnableRestAPI = true;                            // available after REL1_35
wfLoadExtension( 'Parsoid', '{{ mediawiki_root }}/vendor/wikimedia/parsoid/extension.json' );
$wgParsoidSettings = [
    'useSelser' => true,
    'rtTestMode' => false,
    'linting' => false,
];
$wgDefaultUserOptions['visualeditor-enable'] = 1;       // enable by default for everybody
$wgHiddenPrefs[] = 'visualeditor-enable';               // don't allow users to disable it
$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;      // enable VisualEditor's experimental code features
$wgVisualEditorAvailableNamespaces = [
    NS_MAIN => true,
    NS_TALK => true,
    2 => true,                                          // User - User pages
    4 => false,                                         // Project - Information about the wiki
    6 => false,                                         // File - Media description pages
    8 => false,                                         // MediaWiki - Site interface customization
    10 => false,                                        // Template - Template page
    12 => true,                                         // Help - Help pages
    14 => true,                                         // Category - Category description pages
    "_merge_strategy" => "array_plus"
];
$wgVisualEditorSupportedSkins = [
  'vector'                                  // skins that supported VE
];

# Linking to Parsoid/PHP (available in REL1_35)
$wgVirtualRestConfig['modules']['parsoid'] = [
    # once https://gerrit.wikimedia.org/r/583430 lands you can leave this blank
    'url' => 'http://localhost' . $wgScriptPath . '/rest.php',
    'domain' => $wgServer,
];
$wgSessionsInObjectCache = true;    // This feature requires a non-locking session store. The default session store will not work and will cause deadlocks
{% endif %}
{% if item.name == "WikiEditor" %}
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;        // enables link and table wizards by default
$wgDefaultUserOptions['wikieditor-preview'] = 0;        // displays the Preview and Changes tabs
$wgDefaultUserOptions['wikieditor-publish'] = 0;        // displays the Publish and Cancel buttons on the top right side
{% endif %}
{% if item.name == "WSOAuth" %}
$wgOAuthAuthProvider = 'oAuth2';
$wgOAuthUri = '';
$wgOAuthClientId = '...';
$wgOAuthClientSecret = '...';
$wgOAuthRedirectUri = 'https://{{ mediawiki_server }}/index.php/Special:PluggableAuthLogin';
{% endif %}

{% endfor %}
{% endif %}

## Extension: 3rd-party
{% if mediawiki_3rdparty_extensions %}
{% for item in mediawiki_3rdparty_extensions %}
## Load 3rdparty Extension: {{ item.name }}
{% if item.type == "wfload" %}
wfLoadExtension( '{{ item.name }}' );
{% else %}
require_once "$IP/extensions/{{ item.name }}/{{ item.name }}.php";
{% endif %}
# Extension configuration: {{ item.name }}
{% if item.name == "DynamicPageList3" %}
$wgDplSettings['allowUnlimitedCategories'] = false;     // disable unlimited categories
$wgDplSettings['categoryStyleListCutoff'] = 5;          // maximum number of items before being cut off
$wgDplSettings['maxCategoryCount'] = 3;                 // maximum number of categories to allow in queries
$wgDplSettings['maxResultCount'] = 500;                 // maximum number of results to return from a query.
{% endif %}
{% if item.name == "MW-OAuth2Client" %}
$wgOAuth2Client['client']['id']     = '...';                           // The client ID assigned to you by the provider
$wgOAuth2Client['client']['secret'] = '...';                           // The client secret assigned to you by the provider
$wgOAuth2Client['configuration']['authorize_endpoint']     = '{{ mediawiki_server }}/oauth/authorize/';     // Authorization URL
$wgOAuth2Client['configuration']['access_token_endpoint']  = '{{ mediawiki_server }}/oauth/token/';         // Token URL
$wgOAuth2Client['configuration']['api_endpoint']           = '{{ mediawiki_server }}/oauth/me/';             // URL to fetch user JSON
$wgOAuth2Client['configuration']['redirect_uri']           = '{{ mediawiki_server }}/{{ mediaiwki_ArticlePath }}/Special:OAuth2Client/callback';      // URL for OAuth2 server to redirect to
$wgOAuth2Client['configuration']['username'] = 'user_login';                                                // JSON path to username
$wgOAuth2Client['configuration']['email'] = 'user_email';                                                   // JSON path to email
$wgOAuth2Client['configuration']['http_bearer_token'] = 'Bearer';                                           // Token to use in HTTP Authentication
$wgOAuth2Client['configuration']['query_parameter_token'] = 'auth_token';                                   // query parameter to use
$wgOAuth2Client['configuration']['scopes'] = 'basic';                                                       // Permissions
$wgOAuth2Client['configuration']['service_name'] = 'mediawiki';                                             // the name of your service
$wgOAuth2Client['configuration']['service_login_link_text'] = 'theLiJIA';                                   // the text of the login link
{% endif %}

{% endfor %}
{% endif %}

## Configure Wiki Group permission
$wgGroupPermissions['*']['read'] = false;                 // disable reading for anonymous users
$wgGroupPermissions['*']['edit'] = false;                 // disable editing for anonymous users
$wgGroupPermissions['*']['createaccount'] = false;        // prevent new user registration
# But allow them to access the login page or else there will be no way to log in!
$wgWhitelistRead = array ("Main Page", "Special:Userlogin", "Special:Recentchanges", "Special:OAuth2Client", "MediaWiki:Common.css", "-");
$wgWhitelistReadRegexp = array( "/File:.*icon.*/" );
if ( !isset( $_SERVER['REMOTE_ADDR'] ) OR $_SERVER['REMOTE_ADDR'] == '127.0.0.1' ) {
    $wgGroupPermissions['*']['read'] = true;              // allow reading for anonymous users from localhost (required by Parsoid/PHP)
    $wgGroupPermissions['*']['edit'] = true;              // allow reading for anonymous users from localhost (required by Parsoid/PHP)
}
$wgGroupPermissions['user']['edit'] = true;               // allow editing for anonymous users
$wgGroupPermissions['sysop']['edit'] = true;              // allow editing for anonymous users
$wgGroupPermissions['user']['upload'] = true;             // allow register users to upload files
$wgGroupPermissions['sysop']['createaccount'] = true;     //Prevent new user registrations except by sysops
$wgGroupPermissions['sysop']['deletelogentry'] = true;    // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['deleterevision'] = true;    // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['hideuser'] = true;          // allow Sysop to hide usernames from users
$wgGroupPermissions['sysop']['suppressrevision'] = true;  // allow Sysop to hide revisions and log items from users
$wgGroupPermissions['sysop']['suppressionlog'] = true;    // allow Sysop to hide revisions and log items from users

## Debugging options in mediaWiki
#$wgShowExceptionDetails = true;
#$wgDebugToolbar = true;
#$wgShowDebug = true;
#$wgDebugLogFile  = "/var/log/mediawiki.log";

## Enables CirrusSearch and ElasticSearch in Wiki
## Installation:
## 1. pull ElasticSearch 1.7/2.x/5.6.x/6.5.x image
##    docker pull elasticsearch:2-alpine
#
## 2. run ElasticSearch with default
##    docker run -d --name searchEngine --restart always -p 9200:9200 -p 9300:9300 elasticsearch:2-alpine
#
## 3. check below option and make sure its uncommit
#$wgDisableSearchUpdate = true;

## 4. configure search servers if you aren't running ElasticSearch on localhost
## should be configured with the servers (names or IP without port).
#$wgCirrusSearchServers = array( 'localhost' );

## for using port other than default 9200
#$wgCirrusSearchClusters = array( 'default' => array( array( 'port' => '9920','host' => 'localhost','transport' => 'Http' ),));

## 5. Now run this script to generate your elasticsearch index:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/UpdateSearchIndexConfig.php
#
## 6. Now commit $wgDisableSearchUpdate = true above. Updates should start heading to Elasticsearch.
#
## 7. Next bootstrap the search index by running:
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/ForceSearchIndex.php --skipLinks --indexOnSkip
##   php $MW_INSTALL_PATH/extensions/CirrusSearch/maintenance/ForceSearchIndex.php --skipParse
#
## 8. Once that is complete uncommit this to funnel queries to ElasticSearch:
#$wgSearchType = 'CirrusSearch';
#$wgRelatedArticlesUseCirrusSearch = true;

# End of automatically generated settings.
# Add more configuration options below.
